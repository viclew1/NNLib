package fr.lewon.ui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import fr.lewon.ui.panels.ExportToolsPanel;
import fr.lewon.ui.panels.IndividualListPanel;
import fr.lewon.ui.panels.IndividualPanel;
import fr.lewon.ui.panels.PopulationEvolutionPanel;
import fr.lewon.utils.PopulationInfos;

import javax.swing.*;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

public class MainNNUiFrameController {

    private JLabel status;
    private PopulationEvolutionPanel populationEvolutionPanel;
    private IndividualListPanel individualListPane;
    private JPanel appPanel;
    private JPanel containedAppPanel;
    private IndividualPanel individualPane;
    private JSplitPane mainSplitPane;
    private JSplitPane subSplitPane;

    private JFrame frame;

    public void updateInfos(PopulationInfos populationInfos) {
        this.frame.setTitle("NN Evolution - Generation " + populationInfos.getGeneration());
        this.populationEvolutionPanel.updateGraph(populationInfos);
        this.individualListPane.refreshIndividuals(populationInfos.getSortedPopulation());
        this.individualPane.updateIndividual(populationInfos.getSortedPopulation().get(0));
        this.updateStatusMessage("Updated - generation " + populationInfos.getGeneration());
        this.getFrame().repaint();
    }

    public void initFrame(JPanel appPanel) {
        this.frame = new JFrame("NN Evolution");
        this.containedAppPanel = appPanel;
        if (appPanel != null) {
            this.appPanel.add(this.containedAppPanel);
            this.containedAppPanel.addMouseListener(new MouseAdapter() {
                @Override
                public void mousePressed(MouseEvent e) {
                    MainNNUiFrameController.this.containedAppPanel.grabFocus();
                }
            });
            this.getFrame().setContentPane(this.mainSplitPane);
        } else {
            this.getFrame().setContentPane(this.subSplitPane);
        }

        this.getFrame().setMinimumSize(this.getFrame().getContentPane().getMinimumSize());
        this.getFrame().setPreferredSize(this.getFrame().getContentPane().getPreferredSize());
        this.getFrame().pack();
        this.getFrame().setVisible(true);
        this.getFrame().setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.status.setText("Initialization OK");
    }

    public JFrame getFrame() {
        return this.frame;
    }

    public void updateStatusMessage(String message) {
        this.status.setText(message);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        this.$$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(3, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel1.setMinimumSize(new Dimension(-1, -1));
        panel1.setPreferredSize(new Dimension(1200, 700));
        mainSplitPane = new JSplitPane();
        panel1.add(mainSplitPane, new GridConstraints(0, 0, 2, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, new Dimension(800, 500), new Dimension(1200, 700), null, 0, false));
        appPanel = new JPanel();
        appPanel.setLayout(new BorderLayout(0, 0));
        appPanel.setMinimumSize(new Dimension(300, 500));
        appPanel.setPreferredSize(new Dimension(400, 700));
        mainSplitPane.setLeftComponent(appPanel);
        appPanel.setBorder(BorderFactory.createTitledBorder("Application Panel"));
        subSplitPane = new JSplitPane();
        subSplitPane.setMinimumSize(new Dimension(500, 500));
        subSplitPane.setPreferredSize(new Dimension(800, 700));
        mainSplitPane.setRightComponent(subSplitPane);
        final JSplitPane splitPane1 = new JSplitPane();
        splitPane1.setMinimumSize(new Dimension(250, 500));
        splitPane1.setOneTouchExpandable(true);
        splitPane1.setOrientation(0);
        splitPane1.setPreferredSize(new Dimension(300, 700));
        subSplitPane.setRightComponent(splitPane1);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 1, new Insets(5, 5, 5, 5), -1, -1));
        panel2.setMinimumSize(new Dimension(250, 150));
        panel2.setPreferredSize(new Dimension(300, 150));
        splitPane1.setRightComponent(panel2);
        panel2.setBorder(BorderFactory.createTitledBorder("Export tools"));
        final ExportToolsPanel nestedForm1 = new ExportToolsPanel();
        panel2.add(nestedForm1.$$$getRootComponent$$$(), new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_NORTHWEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(1, 1, new Insets(5, 5, 5, 5), -1, -1));
        panel3.setMinimumSize(new Dimension(250, 250));
        panel3.setPreferredSize(new Dimension(300, 400));
        splitPane1.setLeftComponent(panel3);
        panel3.setBorder(BorderFactory.createTitledBorder("Individual scores"));
        individualListPane = new IndividualListPanel();
        panel3.add(individualListPane.$$$getRootComponent$$$(), new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JSplitPane splitPane2 = new JSplitPane();
        splitPane2.setMinimumSize(new Dimension(250, 500));
        splitPane2.setOrientation(0);
        splitPane2.setPreferredSize(new Dimension(500, 700));
        splitPane2.setResizeWeight(0.0);
        subSplitPane.setLeftComponent(splitPane2);
        final JPanel panel4 = new JPanel();
        panel4.setLayout(new GridLayoutManager(1, 1, new Insets(5, 5, 5, 5), -1, -1));
        panel4.setMinimumSize(new Dimension(250, 250));
        panel4.setPreferredSize(new Dimension(500, 400));
        panel4.putClientProperty("html.disable", Boolean.FALSE);
        splitPane2.setLeftComponent(panel4);
        panel4.setBorder(BorderFactory.createTitledBorder("Population Evolution Graph"));
        populationEvolutionPanel = new PopulationEvolutionPanel();
        panel4.add(populationEvolutionPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_NORTHWEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JPanel panel5 = new JPanel();
        panel5.setLayout(new BorderLayout(0, 0));
        panel5.setMinimumSize(new Dimension(250, 250));
        panel5.setPreferredSize(new Dimension(500, 300));
        splitPane2.setRightComponent(panel5);
        panel5.setBorder(BorderFactory.createTitledBorder("Individual display"));
        individualPane = new IndividualPanel();
        panel5.add(individualPane.$$$getRootComponent$$$(), BorderLayout.CENTER);
        status = new JLabel();
        status.setText("Status");
        panel1.add(status, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }
}
